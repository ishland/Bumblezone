plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id 'io.github.juuxel.loom-vineflower' version '1.11.0' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.modmuss50.mod-publish-plugin"

    version = "${rootProject.mod_version}+${rootProject.minecraft_version}-${name}"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    Map<String, Map<String, String>> platformSettings = [
            "fabric": [
                    "curse-id": "363949",
                    "modrinth-id": "eA8SXqWL"
            ],
            "neoforge": [
                    "curse-id": "362479",
                    "modrinth-id": "38tpSycf"
            ]
    ]

    Map<String, Map<String, Boolean>> platformDependencies = [
            "fabric": [
                    "fabric-api": true,
                    "midnightlib": true,
                    "resourceful-lib": true,
                    "better-advancements": false
            ],
            "neoforge": [
                    "resourceful-lib": true
            ]
    ]

    var env = System.getenv()
    def uploadSettings = platformSettings.get(name)
    def uploadDependencies = platformDependencies.get(name)

    if (uploadSettings != null && uploadDependencies != null) {

        File changeLog = rootProject.file("CHANGELOG.md")
        String changelogText = changeLog.exists() ? changeLog.text : ""

        publishMods {
            file = tasks.remapJar.archiveFile
            type = STABLE
            changelog = changelogText

            displayName = "The Bumblezone v${rootProject.mod_version} (${rootProject.minecraft_version} MC ${name.capitalize()})"
            version = "${project.version}"
            modLoaders.add(name)

            if (env.CURSEFORGEKEY) {
                curseforge {
                    accessToken = env.CURSEFORGEKEY
                    projectId = uploadSettings["curse-id"]
                    minecraftVersions.add(rootProject.minecraft_version)

                    if (uploadDependencies.size() > 0) {
                        uploadDependencies.each { dep, required ->
                            if (required) {
                                requires(dep)
                            }
                            else {
                                optional(dep)
                            }
                        }
                    }
                }
            }

            if (env.MODRINTH_TOKEN) {
                modrinth {
                    accessToken = env.MODRINTH_TOKEN
                    projectId = uploadSettings["modrinth-id"]
                    minecraftVersions.add(rootProject.minecraft_version)

                    dependencies {
                        uploadDependencies.each { dep, required ->
                            if (required) {
                                requires(dep)
                            } else {
                                optional(dep)
                            }
                        }
                    }
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.mod_id
    version = "${rootProject.mod_version}+${rootProject.minecraft_version}-${name}"
    group = rootProject.maven_group

    repositories {
        mavenLocal()
        maven {
            url "https://maven.neoforged.net/releases/"
        }
        maven {
            url = 'https://nexus.resourcefulbees.com/repository/maven-public/'
            content {
                includeGroup 'com.telepathicgrunt'
                includeGroup 'com.teamresourceful.resourcefullib'
                includeGroup 'com.teamresourceful'
                includeGroup 'earth.terrarium.athena'
            }
        }
        maven {
            url = 'https://api.modrinth.com/maven/'
            content {
                includeGroup 'maven.modrinth'
            }
        }
        maven {
            url = 'https://www.cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }
        maven {
            url = 'https://maven.shedaniel.me'
            content {
                includeGroup 'me.shedaniel.cloth'
                includeGroup 'me.shedaniel'
            }
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
            content {
                includeGroupByRegex 'dev\\.emi.*'
            }
        }
        maven {
            url = 'https://maven.blamejared.com'
            content {
                includeGroup 'mezz.jei'
            }
        }
        maven {
            url = "https://maven.octo-studios.com/releases"
            content {
                includeGroup 'top.theillusivec4.curios'
            }
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
        maven {
            name = "C4's Maven"
            url = 'https://maven.theillusivec4.top/'
            content {
                includeGroup 'top.theillusivec4.curios'
                includeGroup 'com.illusivesoulworks.caelus'
            }
        }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            content {
                includeGroup("software.bernie.geckolib")
            }
        }
        maven {
            name = "ModMaven"
            url = "https://modmaven.dev"
            content {
                includeGroup 'com.hollingsworth.ars_nouveau'
            }
        }
        maven {
            url 'https://modmaven.dev/'
            content {
                includeGroup 'mekanism'
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }

    task optimizePng {
        def pngPatterns = ["**/*.png"]
        doFirst {
            println 'Executing oxipng task...'
        }
        doLast {
            //Ensure the logo is minimized (we add this file to each jar)
            //Minimize any PNGs in the source sets
            for (dir in sourceSets.main.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
            println 'Finished oxipng task...'
        }
    }
}

//Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
void minimizePNGFile(File file) {
    exec {
        executable "./oxipng.exe"
        args "-o", "6", "-i", "0", "--strip", "all", "-a", "-Z", file
    }
}

task buildAndReleaseAll{
    dependsOn(':common:buildAndRelease', ':neoforge:buildAndRelease', ':fabric:buildAndRelease')
}